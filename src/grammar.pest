main = { SOI ~ (funcDecl | externFunc | structDef)* ~ EOI }

stmts = { "{" ~ expr* ~ "}" }

paramsDecl = { "(" ~ ")" |
             "(" ~ paramDecl ~ ("," ~ paramDecl)* ~ ")"
} 
paramDecl  = { varType ~ id }

funcDecl = { "fun" ~ id ~ paramsDecl ~ retType? ~ stmts }
    retType = { ":" ~ varType }

externFunc = { "extern fun" ~ id ~ typesList ~ retType? ~ ";" }
    typesList = { "(" ~ varType* ~ ")" } 

structDef = { "struct" ~ id ~ structMembersDef }
structMembersDef = _{ 
    "{" ~ "}"
    | "{" ~ paramDecl ~ ("," ~ paramDecl)* ~ "}" 
    | "{" ~ (paramDecl ~ ",")+ ~ "}" 
}

expr = { 
      varDeclExpr ~ ";"
    | unaryExpr ~ ";"
    | funCallExpr ~ ";"
    | ifExpr
    | returnExpr ~ ";"
    | loopExpr
    | whileExpr
    | breakExpr ~ ";"
    | assignExpr ~ ";"
    | binaryExpr ~ ";"
    // DEBUG | value
}
                
valuedExpr = _{ 
                binaryExpr
                | unaryExpr
                | membAccessExpr
                | funCallExpr
                | value 
}

value = { float | number | boolean | strct | id | array }

varDeclExpr = { varType ~ id ~ "=" ~ valuedExpr }

assignExpr  = { (membAccessExpr | id) ~ "=" ~ valuedExpr }

binaryExpr = { binaryTerm ~ (binaryOp ~ binaryTerm)+ }
binaryTerm = _{ (unaryExpr
                    | membAccessExpr 
                    | funCallExpr 
                    | value) 
                | "(" ~ valuedExpr ~ ")" }
binaryOp = _{ add | subtract | multiply | divide | and 
              | or | leq | geq | eq | ne | lt | gt }

unaryExpr = { unaryOp ~ ( valuedExpr | "(" ~ valuedExpr ~ ")" ) }
unaryOp = _{ not | reference | deref }

funCallExpr  = { id ~ params }
    params = { "(" ~ param* ~ ")" } 
    param =  { valuedExpr ~ "," ~ param | valuedExpr } 

ifExpr = { ifBlock ~ (elifBlock* ~ elseBlock)? }
    ifBlock   = { "if" ~ valuedExpr ~  stmts }
    elifBlock = { "elif" ~ valuedExpr ~ stmts }
    elseBlock = { "else" ~ stmts }

returnExpr = { "ret" ~ valuedExpr }

loopExpr = { "loop" ~ stmts }

whileExpr = { "while" ~ valuedExpr ~ stmts }

breakExpr = { "break" }

// indexationExpr = { (unaryExpr | funCallExpr | id) ~ indices }

membAccessExpr = { (funCallExpr | id) ~ (member | indice)+ }
member = { "." ~ id }
indice = { "[" ~ valuedExpr ~ "]" }

// primitive types 
number   = @{ ("-")? ~ ASCII_DIGIT+ }
float    = @{ ("-")? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
id       = @{ "_" * ~ ASCII_ALPHANUMERIC ~ (ASCII_ALPHANUMERIC | "_" )* }
array    = { "[" ~ "]" |
             "[" ~ valuedExpr ~ ("," ~ valuedExpr)* ~ "]"
} 
strct = { id ~ structMembers }
    memberDecl = { id ~ "=" ~ valuedExpr } 
    structMembers = _{ 
        "{" ~ "}"
        | "{" ~ memberDecl ~ ("," ~ memberDecl)* ~ "}" 
        | "{" ~ (memberDecl ~ ",")+ ~ "}" 
    }

boolean  = { "true" | "false" }

varType = { refType | simpleType | arrayType }
    refType = { "&" ~ varType }
    simpleType = { id }
    arrayType = { "[" ~ varType ~ ";" ~ number ~ "]" }

// operands
add       = { "+" }
subtract  = { "-" }
multiply  = { "*" }
divide    = { "/" }
and       = { "&&" }
or        = { "||" }
not       = { "!" }
eq        = { "==" }
ne        = { "!=" }
lt        = { "<" }
gt        = { ">" }
leq       = { "<=" }
geq       = { ">=" }
reference = { "&" }
deref     = { "*" }

COMMENT = _{ "#" ~ (!"\n" ~ ANY)* }
WHITESPACE = _{ " " | "\t" | NEWLINE }
