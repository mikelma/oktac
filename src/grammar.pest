main = { SOI ~ stmts ~ EOI }

stmts = { expr* }

expr = { 
      assignExpr ~ ";"
    | binaryExpr ~ ";"
    | unaryExpr ~ ";"
    | printExpr ~ ";"
    | ifElseExpr
    | forExpr
    | returnExpr ~ ";"
    | value
}
valuedExpr = _{ binaryExpr | unaryExpr | value }

value = { number | id | boolean }

binaryExpr = { binaryTerm ~ (binaryOp ~ binaryTerm)+ }
binaryTerm = _{ (value | unaryExpr) | "(" ~ valuedExpr ~ ")" }
binaryOp = _{ add | subtract | multiply | divide | and 
              | or | leq | geq | eq | lt | gt }

unaryExpr = { unaryOp ~ valuedExpr } 
unaryOp = _{ not }

assignExpr  = { id ~ "=" ~ valuedExpr }

printExpr  = { "print(" ~ valuedExpr ~ ")" }

ifElseExpr = { "if" ~ valuedExpr ~ "{" ~ stmts ~ "}" ~ "else" ~ "{" ~ stmts ~ "}" }

forExpr = { "for" ~ id ~ "in" ~ iterator ~ "{" ~ stmts ~ "}" }

returnExpr = { "ret" ~ valuedExpr }

iterator = { intRange }
    intRange = { value ~ ".." ~ value }

// primitive types 
number   = @{ ("-")? ~ ASCII_DIGIT+ }
id       = @{ ASCII_ALPHA + }
boolean  = { "true" | "false" }

// operands
add      = { "+" }
subtract = { "-" }
multiply = { "*" }
divide   = { "/" }
and      = { "&&" }
or       = { "||" }
not      = { "!" }
eq       = { "==" }
lt       = { "<" }
gt       = { ">" }
leq      = { "<=" }
geq      = { ">=" }

COMMENT = _{ "#" ~ (!"\n" ~ ANY)* }
WHITESPACE = _{ " " | "\t" | NEWLINE }
