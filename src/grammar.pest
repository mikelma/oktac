main = { SOI ~ funcDecl* ~ EOI }

stmts = { "{" ~ expr* ~ "}" }

paramsDecl = { "(" ~ (paramDecl ~ "," ~ paramDecl | paramDecl)* ~ ")" }
    paramDecl  = { varType ~ id }

funcDecl = { "fun" ~ id ~ paramsDecl ~ retType? ~ stmts }
retType = { ":" ~ varType }

expr = { 
      varDeclExpr ~ ";"
    | unaryExpr ~ ";"
    | funCallExpr ~ ";"
    | ifElseExpr
    | returnExpr ~ ";"
    | loopExpr
    | whileExpr
    | breakExpr ~ ";"
    | assignExpr ~ ";"
    | binaryExpr ~ ";"
    | value
}
valuedExpr = _{ binaryExpr | unaryExpr | funCallExpr | value }
value = { float | number | boolean | id }

varDeclExpr = { varType ~ id ~ "=" ~ valuedExpr }

assignExpr  = { id ~ "=" ~ valuedExpr }

binaryExpr = { binaryTerm ~ (binaryOp ~ binaryTerm)+ }
binaryTerm = _{ (unaryExpr | funCallExpr | value) | "(" ~ valuedExpr ~ ")" }
binaryOp = _{ add | subtract | multiply | divide | and 
              | or | leq | geq | eq | ne | lt | gt }

unaryExpr = { unaryOp ~ value
            | unaryOp ~ "(" ~ valuedExpr ~ ")"}
unaryOp = _{ not }

funCallExpr  = { id ~ params }
    params = { "(" ~ param* ~ ")" } 
    param =  { valuedExpr ~ "," ~ param | valuedExpr } 

ifElseExpr = { "if" ~ valuedExpr ~  stmts ~ "else" ~ stmts }

returnExpr = { "ret" ~ valuedExpr }

loopExpr = { "loop" ~ stmts }

whileExpr = { "while" ~ valuedExpr ~ stmts }

breakExpr = { "break" }


// primitive types 
number   = @{ ("-")? ~ ASCII_DIGIT+ }
float    = @{ ("-")? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
id       = @{ ASCII_ALPHA + }
boolean  = { "true" | "false" }
varType     = { "i8" | "u8" | "i16" | "u16" 
                | "i32" | "u32" | "i64" | "u64" 
                | "bool" | "f32" | "f64" }

// operands
add      = { "+" }
subtract = { "-" }
multiply = { "*" }
divide   = { "/" }
and      = { "&&" }
or       = { "||" }
not      = { "!" }
eq       = { "==" }
ne       = { "!=" }
lt       = { "<" }
gt       = { ">" }
leq      = { "<=" }
geq      = { ">=" }

COMMENT = _{ "#" ~ (!"\n" ~ ANY)* }
WHITESPACE = _{ " " | "\t" | NEWLINE }
