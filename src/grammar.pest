main = { SOI ~ (useModules | declaration)* ~ EOI }


// ------------ declarations  ------------ //

declaration = _{
    funcDecl | externFunc | structDef 
    | enumDef | aliasDecl | constVarDecl
    | macroDecl
}

compOpts = { "[[" ~ compOption+ ~ "]]" }
compOption = { id ~ "=" ~ (simpleOpts | optList) }
simpleOpts = _{ str | float | number | boolean }
optList = { "(" ~ (simpleOpts ~ ",")* ~ simpleOpts? ~ ")" }

funcDecl = { compOpts? ~ visibility? ~ "fun" ~ id ~ paramsDecl ~ retType? ~ stmts }
    retType = { ":" ~ varType }
    paramsDecl = { "(" ~ ")" |
                "(" ~ paramDecl ~ ("," ~ paramDecl)* ~ ")"
    } 
paramDecl  = { id ~ ":" ~ varType }

externFunc = { visibility? ~ "extern fun" ~ id ~ typesList ~ retType? }
    typesList = { "(" ~ variadic? ~ ")" 
                | "(" ~ varType ~ ("," ~ varType)* ~ ("," ~ variadic)? ~ ")"
    } 
    variadic = { "..." }

structDef = { compOpts? ~ visibility? ~ "type" ~ id ~ "=" ~ "struct" ~ structMembersDef }
    structMembersDef = _{ 
        "{" ~ "}"
        | "{" ~ paramDecl ~ ("," ~ paramDecl)* ~ "}" 
        | "{" ~ (paramDecl ~ ",")+ ~ "}" 
    }

enumDef = {compOpts? ~ visibility? ~ "type" ~ id ~ "=" ~ "enum" ~ "{" ~ (enumVariant ~ ",")* ~ enumVariant? ~ "}" }
    enumVariant = { id ~ namedFileds? }
    namedFileds = { "{" ~ (paramDecl ~ ",")* ~ paramDecl? ~ "}" }

aliasDecl = { visibility? ~ "type" ~ id ~ "=" ~ varType }

useModules = { "use" ~ module ~ ("," ~ module)* ~ ","?}
module = { id ~ ("/" ~ id)*}

constVarDecl = { visibility? ~ "const" ~ id ~ ":" ~ varType ~ "=" ~ expr }

macroDecl = { compOpts? ~ visibility? ~ "macro" ~ id ~ ("=" ~ "\"\"\"" ~ macroInner ~ "\"\"\"")? }
macroInner = { ( !"\"\"\"" ~ ANY )* }
macroQuote = { declaration | stmts | stmt+ | expr }

// ------------ statements  ------------ //

stmts = { "{" ~ stmt* ~ "}" }

stmt = { 
    varDeclStmt ~ ";"
    | funCallExpr ~ ";"
    | ifLetStmt
    | ifStmt
    | returnStmt ~ ";"
    | loopStmt
    | whileStmt
    | forStmt
    | breakStmt ~ ";"
    | assignStmt ~ ";"
}
                
varDeclStmt = { "let" ~ id ~ (":" ~ varType)? ~ "=" ~ expr }

assignStmt  = { (membAccessExpr | unaryExpr | id) ~ "=" ~ expr }

ifStmt = { ifBlock ~ elifBlock* ~ elseBlock? }
    ifBlock   = { "if" ~ expr ~  stmts }
    elifBlock = { "elif" ~ expr ~ stmts }
    elseBlock = { "else" ~ stmts }

returnStmt = { "ret" ~ expr }

loopStmt = { "loop" ~ stmts }

whileStmt = { "while" ~ expr ~ stmts }

breakStmt = { "break" }

ifLetStmt = { "if let" ~ enm ~ "=" ~ expr ~ stmts ~ ("else" ~ stmts)?}

forStmt = { "for" ~ (forValidStmt ~ ";")? ~ expr ~ (";" ~ forValidStmt)? ~ stmts }
forValidStmt = {
    varDeclStmt
    | funCallExpr
    | assignStmt
}

// ------------ expressions  ------------ //

expr = _{ 
    binaryExpr
    | membAccessExpr
    | unaryExpr
    | funCallExpr
    | value 
}

binaryExpr = { binaryTerm ~ (binaryOp ~ binaryTerm)+ }
binaryTerm = _{ (membAccessExpr
                    | unaryExpr
                    | funCallExpr 
                    | value) 
                | "(" ~ expr ~ ")" }
binaryOp = _{ add | subtract | multiply | divide | modulo
              | and | or | binaryAnd | binaryOr | binaryXor | shiftLeft | shiftRight
              | leq | geq | eq | ne | lt | gt }

unaryExpr = { unaryOp ~ ( exprExceptBinary | "(" ~ expr ~ ")" ) }
// unary exprs. over binary and memb. access exprs. must contain the expr. between parenthesis
exprExceptBinary = _{
    // membAccessExpr
    unaryExpr
    | funCallExpr
    | value 
} 
unaryOp = _{ binaryNot | minus | not | reference | deref }

funCallExpr  = { (builtinFuncId | normalFuncId) ~ params }
    normalFuncId = { id }
    builtinFuncId = @{ "@" ~ id }
    params = { "(" ~ param* ~ ")" } 
    param =  { valueOrType ~ "," ~ param | valueOrType } 
    valueOrType = { binaryExpr | membAccessExpr | funCallExpr 
                    | varType | unaryExpr | value }

membAccessExpr = { (unaryExpr | funCallExpr | id) ~ (member | indice | range)+ }
member = { "." ~ id }
indice = { "[" ~ expr ~ "]" }
range = { "[" ~ rangeVal ~ ".." ~ rangeVal ~ "]" }
rangeVal = { expr? }

// ------------ literal values  ------------ //

value = { float | number | str | array | enm | strct | boolean | id }

number   = @{ ("-")? ~ ASCII_DIGIT+ }
float    = @{ ("-")? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
id       = @{ (!reserved | &(reserved~(ASCII_ALPHANUMERIC| "_"))) ~ "_"* ~ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_" )* }
array    = { "[" ~ "]" |
             "[" ~ expr ~ ("," ~ expr)* ~ "]"
} 
boolean  = { "true" | "false" }

strct = { id ~ structMembers }
    memberDecl = { id ~ "=" ~ expr } 
    structMembers = _{ 
        "(" ~ ")"
        | "{" ~ memberDecl ~ ("," ~ memberDecl)* ~ "}" 
        | "{" ~ (memberDecl ~ ",")+ ~ "}" 
    }

enm = { id ~ ":" ~ id ~ structMembers? } // enum

// char = @{ "'" ~ strChar ~ "'" }
str = ${ "\"" ~ strInner ~ "\"" }
    strInner = @{ strChar* }
    strChar = {
        !("\"" | "\\") ~ ANY
        | "\\" ~ ("\"" | "\\" | "/" | "n" | "r" | "t")
        | "\\" ~ "u" ~ "{"~ ASCII_HEX_DIGIT{1, 6} ~ "}"
    }

// ------------ misc ------------ //

varType = { refType | simpleType | arrayType | sliceType }
    refType = { "&" ~ varType }
    arrayType = { "[" ~ varType ~ ";" ~ number ~ "]" }
    sliceType = { "[" ~ varType ~ "]" }
    simpleType = @{ "_" * ~ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_" )* }

visibility = { "pub" }

// operands
add        = { "+" }
subtract   = { "-" }
minus      = @{ subtract }
multiply   = { "*" }
divide     = { "/" }
and        = { "&&" }
or         = { "||" }
not        = { "!" }
eq         = { "==" }
ne         = { "!=" }
lt         = { "<" }
gt         = { ">" }
leq        = { "<=" }
geq        = { ">=" }
reference  = { "&" }
deref      = { "*" }
binaryNot  = { "~" }
binaryAnd  = { "&" }
binaryOr   = { "|" }
binaryXor  = { "^" }
shiftLeft  = { "<<" }
shiftRight = { ">>" }
modulo     = { "%" }

reserved = { intTypes | ("f32" | "f64") | "c_voidptr" | "str" | keywords}
    intTypes = @{ ("i" | "u") ~ ("8" | "16" | "32" | "64") }
    keywords = { "if" | "while" | "loop" | "for" | "fun" 
                 | "struct" | "enum" | "use" | "break" | "ret" 
                 | "type" | "const" | "macro"
    }
 
COMMENT = _{ "#" ~ (!"\n" ~ ANY)* }
WHITESPACE = _{ " " | "\t" | NEWLINE }
