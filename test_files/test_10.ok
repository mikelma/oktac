extern fun print_i32(i32): i16; 
extern fun print_u64(u64): i16; 
extern fun println(): i16;

# fun dummy([f64;4] ac, [[u16;2];0] aa, [[u16;2];0] ab): i8 {
#     ret 0;
# }
# 
# fun dummy2(): u32 {
#     ret 1;
# }

# fun gets_array([i8; 2] b): i8 {
#     ret b[0];
# }

fun main(): i16 {
    ## -- Array declaration -- ##
    # [i32; 3]  a = [1, 2, 3];
    # [f64; 2]  a = [1.0, 2.1];
    # [bool; 4] a = [false, true, false, true];

    # [[i8;2];3]   b  = [[1, -1], [0, -2], [0, 0]];
    # [i8;2]       b  = [-102, 100];
    # [[bool;1];2] ok = [[true], [false]];
    # [bool;0]     a  = [];

    ## -- Array declaration errors -- ##
    # [[i8]]   b = [-1, 1, [0, -2]];              # error
    # [[f32]]  b = [-1, 1.0, [0, -2]];            # error
    # [[i8]]   b = [[1, -1], [0, -2], [], [0.1]]; # error
    # [i16]    c = [1.0, 2.0, 1.0];               # error
    # [[bool]] w = [[false], [[true]]];           # error

    ## -- Function calls with arrays -- ##
    # dummy([0.1, 0.2, 0.0, -1.0], [], [[]]); # ok

    ## -- Operations over arrays -- ##
    [i32; 3] a = [1, 2, 3];
    i32      b = a[0];
    a[1]     = 42;

    print_i32(a[1]);
    println();
    println();
    
    a = [0, 0, 0];

    print_i32(a[1]);
    println();
    println();

    [[i32;2]; 3] a = [[1, 2], [3, 4], [5, 6]];
    u64 i = 0;
    while i < 3 {
        print_i32(a[i][0]);
        println();
        print_i32(a[i][1]);
        println();

        i = i + 1;
    } 

    # i32 e = a[1][2][1]; # error
    # i32 e = a[1];       # error

    ret 0;
}
