## A simple macro example.
##
## This macro takes pairs of identifiers and integer
## values, and creates declaration statements asigning
## the corresponding integer to each identifier.
pub macro example = """
    local code = "{"
    for i = 1, (#okta.macro.input/2) do
        local id = okta.macro.input[i*2-1].Identifyer
        local val = okta.macro.input[i*2].Int64

        code = code .. string.format("let %s = %s;\n", id, val)
    end

    local decl = okta.quote(code.."}")

    return decl
"""

pub extern fun printf(&u8, ...): u64

## More complex macro example.
##
## This macro expands to create a lua-like `print` function.
## Note that this macro requires libc's printf function to
## be imported.
[[ path = "./println.lua" ]]
pub macro println

## Example of a derive macro:

[[ derive = ("debug") ]]
pub type Foo = struct {
    x: i32,
    y: f64,
}

[[ path = "./debug_macro.lua" ]]
pub macro debug
