## A simple macro example.
##
## This macro takes pairs of identifiers and integer
## values, and creates declaration statements asigning
## the corresponding integer to each identifier.
pub macro example = """
    local code = "{"
    for i = 1, (#okta.macro.input/2) do
        local id = okta.macro.input[i*2-1].Identifyer
        local val = okta.macro.input[i*2].Int64

        code = code .. string.format("let %s = %s;\n", id, val)
    end

    -- using the `quote` function, the string is converted to an AST
    local decl = okta.quote(code.."}")

    -- macros always have to return an AST 
    return decl
"""

## More complex macro example.
##
## When this macro getsexpanded creates a lua-like `print` function.
## Note that this macro requires libc's printf function to
## be imported.
## In this case, the lua code for the macro is located in a separate file,
## that can be loaded by defining the relative path to the lua file.
[[ path = "./println.lua" ]]
pub macro println

# this function is needed to run the `println` macro
extern fun printf(&u8, ...): u64
