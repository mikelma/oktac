use simple/simple # simple macro examples
use derives/lib # more complex macro example using derives

# this is required by the `debug` macro (see `derives/derive_pizza.lua`)
extern fun printf(&u8, ...): u64

[[ derive = ("debug") ]]
type Octopus = struct {
    tentacles: u8,
    weight: f64,
    name: str,
}

fun main(): i64 {
    # --- simple examples --- # 

    example(hello, 42, kaixo, 12, egunon, 10);

    # here, the macro throws a compile time error
    # println("helloo", 1, 10, [1, 2]); 

    println("Aloha!:", 10, kaixo, ret_answer());

    let foo = Foo { x = 10, y = 32.10 };
    println("Foo: x=", foo.x, "y=", foo.y);

    # ----------------------- # 


    # --- derive examples --- # 

    # type `Pizza` is generated by the `derive_pizza` macro over `Foo` type
    let pizza = Pizza { x = 10, y = 32.10 };

    # this function is generated by `derive_pizza` macro
    pizza_print(&pizza);

    let ottis = Octopus {
        tentacles = 8,
        weight = 501.182,
        name = "Ottis",
    };

    # these functions are generated by the `debug` macro
    foo_dbg(&foo);
    octopus_dbg(&ottis);

    # ----------------------- # 

    ret 0;
}

fun ret_answer(): i8 { ret 42; }
