extern fun printf(&u8, ...)

type Test = struct {
    i64 a, 
    [TestInner; 2] list,
}

type TestInner = struct {
    i32 value,
}

type Animal = enum {
    Dog { u8 size },
    Fish,
    Octopus,
}

# constant value declaration
const MEANING_OF_LIFE: i64 = PRETTY_NUM + 10
const PRETTY_NUM: i64 = 32

fun main(): i64 {

    let test = Test { 
        a = MEANING_OF_LIFE, 
        list = [ 
            TestInner { value = 10 }, 
            TestInner { value = 11 } 
        ],
    };

    let octopus = Animal:Octopus;
    let dog = Animal:Dog { size = 5 };

    printf(@cstr("test.a:             %d\n"), test.a);
    printf(@cstr("test.list[0].value: %d\n"), test.list[0].value);
    printf(@cstr("test.list[1].value: %d\n"), test.list[1].value);

    if let Animal:Dog { size=s } = dog {
        printf(@cstr("\ndog's size is %d!\n"), s);
    }

    ret test.a;
}
